---
title: SwingVaadin Callable Interface
order: 5
layout: page
---

= SwingVaadin Callable Interface

== Overview

Thanks to `SwingVaadinCallable` interface it is possibile to query the Vaadin Flow view directly from Swing using it`s representation.


== Define a common interface

The methods to be published by your view must be exposed using an interface that extends `SwingVaadinCallable`

[source,java]
----
public interface NameProvider extends SwingVaadinCallable {
    String getName();
}
----

This interface must be accessible from both your Vaadin server and your Swing application.
The suggested way to achive this is to have the interface built in an artifact which is then added as dependency of both.


== Implement View

In your Vaadin view you can implement the interface to expose the implementation.

In this example we build a simple view containing only a text field with "Developer" as default value.

[source,java]
----
@Route(value = "")
@Bridge
public class MainView extends HorizontalLayout implements NameProvider {
    private TextField name;
    
    @Override
    public String getName() {
        return name.getValue();
    }

    public MainView() {
        name = new TextField("Your name");
        name.setValue("Developer");
        add(name);
    }
}
----

== Query the Vaadin panel

While rendering a view as a `JVaadinPanel`, it is possibile to use the interface using the `as` method.

[source,java]
----
// Create the view
JVaadinPanel vaadinPanel = SwingVaadinClient.getBuilder().build(vaadinViewUrl);
// Add the panel to your swing application
// ...
// Query Vaadin using your NameProvider interface
NameProvider np = vaadinPanel.as(NameProvider.class);
// This will return "Developer", or different values if the user changed the TextField content
np.getName();
----

