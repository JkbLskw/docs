---
title: Vaadin Flow for Swing Kit
order: 3
layout: page
---

= Vaadin Flow for Swing Kit

== Bridge Annotation

To enable your views to be used from Swing, you will need to add the annotation `@Bridge`. You can see an example of this here:

[source,java]
----
@Bridge
public class MyView extends HorizontalLayout {
}
----

It is possible to check if the UI is currently rendered in a normal browser or from a swing application by using the following:

[source,java]
----
SwingVaadinClient.isSwingRendered()
----

== Emit Events to Swing

You may send events to be handled from swing. This is done creating a new `VaadinSwingEvent`.

For example, to create a button that when clicked sends an event to Swing do something like this:

[source,java]
----
new Button("Exit", event -> {
    EventEmitter actionEmitter = EventEmitterFactory.newEventEmitter();
    actionEmitter.emit(new VaadinSwingEvent("myEvent")); // asynchronously sends an action event to Swing
});
----

You can enrich events with more details using parameters like so:

[source,java]
----
EventEmitter actionEmitter = EventEmitterFactory.newEventEmitter();
VaadinSwingEventBuilder eventBuilder = new VaadinSwingEventBuilder("enrichedEvent");
eventBuilder.addParam("detail1", "someDetail");
eventBuilder.addParam("eventDate", new Date());
actionEmitter.emit(eventBuilder.build());
----
Note that the instances contained inside `VaadinSwingEvent` must always be `Serializable` to allow the Swing part to parse the data.
